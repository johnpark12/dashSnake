Design Document:

MULTIPLAYER SNAKE:
Designed to be played with 3 or more players.
Whole map will be visible.
Map contains obstacles that snakes can maneuver around.
Player controls a snake. Standard arrow key controls PLUS pressing the spacebar causes the snake to speed up temporarily (with a cooldown).
Can direct the snake to either:
 eat food which will cause the snake to grow
 slam into other snakes which will cause both snakes to lose length equivalent to that of the shorter snake (ie. the shorter snake dies, the longer snake is made shorter).

ARCHITECTURE:
Simple architecture of registering only the key presses on the server side and sending out board state to everyone. Doing so will make lag appear as a delayed response of the piece that they're controlling.
Game modelling logic will be handled on the server side.
Decoupled the game logic from the DOM rendering. In a more complicated game, it would also make sense to further break down game logic. Decoupling also allows us to move rendering to browser and logic to server.

DEVELOPMENT:
Build a single player version:
 Map generation
 Snake generation
 Frame generation
 Seperating the logic and rendering into server and client respectively.
 Registering player keypresses on the server side.
 Refactoring to make the netcode more readable and workable.
 Adding the rest of the "gameplay" such as snake on snake, game over, and boosting.

Room Settings:
    Room number
    Number of players
    Size of the map
    Color
    (?) Game speed?
If you create a room, then people can only join by entering the room number.
Otherwise, you can choose to join a random game. Players seeking a random game will be added to a queue and each group of four in the queue will be batched into a new room.
Actually I changed my mind. If you choose to join a random game, then you'll be put into a public room.

TODO:
Implement obstacles.
Implement other game elements such as boost.
Styling
Autogenerate Room Ids.
Allow people to play again with the same people in the same room.
Hosting on Heroku
Encode room in URL so that it can be played by just sharing a link.
Handle disconnects.
Garbage handling.
